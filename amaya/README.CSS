

		    Cascading Style Sheet support in Amaya

			  First version 04/28/96

			     Daniel Veillard

			Daniel.Veillard@inrialpes.fr
			       veillard@w3.org


-------------------------------------------------------------------------------

   This document describes the current state of the Cascading Style Sheet
support in Amaya. The implementation is based on the latest (18 Apr 96)
Working Draft by Hakon W Lie and Bert Bos from the W3 Consortium.
We focussed on providing as much features as possible and offering an
easy to use and learn interface. Considering the second point we choosed
a "learn by example" approach suitable for users not experienced with
style sheets.

I ] Analysis of the problem

  CSS defines a syntax to describe presentation associated with elements
as a set of properties (like colors, fonts, etc.). Associated to properties,
a selector restrict the application of these rules to a set of element
depending on their type (like H1, or LI for a list item), their context
(like an EM in an H3) or classes applied  to an element. A set of rules
defines which properties should be applied when more than one selector match 
a given element. While this is relatively simple for someone used to handle
structured document, the experience gained in the Opera project proves
that a new user may have difficulties to modelize a document as a
structured entity. This might be a problem when trying to introduce the
CSS to a large audience.

  Thus, the challenge is to build a tool simple enough so that inexperienced
people can use styles when creating HTML pages with Amaya, while retaining
all the possibilities of CSS. The interface was also designed to not
hide the underlying complexity of the document structure (Structure View)
and of the CSS language (CSS rules are shown), in order to shorten the
learning curve to structured presentation design.

  One of the strongest features of CSS is the cascading model.
Presentation rules can be fetched from different remote files, tied to the 
document or associated to one specific element in a page. This allows sharing
and reuse of sets of rules whilst allowing specific presentation. It allows
also the use of an user defined set of rules to accomodate his preferences.
We tried to give a complete and simple view of the cascading model, showing
separately specific presentation (Structure View), document specific rules
(Structure View and CSS form) and all the set of rules associated to the
external files referenced by the document. It is possible to manipulate
rules in one file but also to move them from one to another, allowing
to take presentation rules from a remote server and apply them selectively
to his own pages, in the purpose of building a pool of presentation rules.

II ] What's here

We first present the Style interface as provided by the current version of
Amaya :

The Amaya menu bar contains a "Style" entry containing all the actions
related to presentation and style manipulation. Element in the menu are
ordered from the most specific to the most generic operations.

 a) Entries for specific presentation represented in HTML

   + Emphasis  -> transform selected elements to EM
   + Strong    -> idem for STRONG

 b) Entries linked to dialog boxes allowing to put specific presentation
    on the currently selected elements

   + Characters -> select font attributes (size, style, family and underline)
   + Colors     -> select foreground and background by name.
                   The same operation can be done from the palette.
   + Format     -> select alignment, indentation, justification and
                   line spacing of paragraphs.

All the modifications made from a) and b) entries and dialog boxes can
be viewed in realtime in the structure view.

  c) Entries allowing to define classes and apply classes

   + CreateClass :  use the style applied to the selected element to
                    define a new class. A list of the existing classes
		    is proposed, and the type of the current element is
		    the default.
         => This is the first step toward defining CSS rules. Presentation
	    is migrated to the document header, defining a new CSS rule.
	    All elements of the new class take the new style.

   + ApplyClass  :  use one of the existing classes and apply it to the
                    selected elements. 

  d) The next item gives access to the CSS form :

 	-------------------------------------------------------------
       |    _______________________       _______________________    |
       |   |     CSS Selector 1    |     |XXXXXXXXXXXXXXXXXXXXXXX|   |
       |   |XXXXXXXXXXXXXXXXXXXXXXX|     |  CSS Selector 2       |   |
       |   |_______________________|     |_______________________|   |
       |                                                             |
       |    _______________________       _______________________    |
       |   |                       | M>  |                       |   |
       |   |                       | C>  |XXXXXXXXXXXXXXXXXXXXXXX|   |
       |   |     Rule Selector 1   |  D  | Rule Selector 2       |   |
       |   |                       |  <C |                       |   |
       |   |_______________________|  <M  _______________________|   |
       |                                                             |
       |    _____________________________________________________    |
       |   |                                                     |   |
       |   |    CSS Syntax of the currently selected rule        |   |
       |   |                                                     |   |
       |   |_____________________________________________________|   |
       |                                                             |
       |                                                             |
       |    Save  SaveAs   Reload   New  Remove  Cancel              |
       |                                                             |
 	-------------------------------------------------------------

     + The two CSS selectors allow to select CSS files from which
       rules can be manipulated. In each, the currently selected
       file is highlighted.

     + The two rule selectors show the rules extracted from the selected
       files. Only one rule can be selected for both selector, this is
       the current rule. All rules are grouped by their selector and
       only the list of selectors is shown here.

     + The text area at the bottom shows the CSS syntax of the current rule
       (the one selected from one of the above selectors), allowing the user
       to learn the syntax. Of course this is an editable field allowing
       the user to modify the current rule.

     + Between the Rule Selectors there is a column of 5 buttons.
          + pushing M> merge the current rule (as shown in the text area)
	    to the second file. Changes are immediately reflected in the
	    Formatted View.
          + pushing C> copy the current rule to the second file.
	    The difference with the merge is that all rules using the same
	    selector initially present in the file are first removed.
	  + pushing D button delete the current rule.
	  + <M idem with first file. 
	  + <C idem with first file.

      + The five buttons at the bottom are used for operations at the
        file level.
	  + Save  : Initiate the operation of saving all modified CSS files.
	  + Save As : Allow to save one of the CSS to a local file.
	  + Reload : This is a coarse grained Undo, it reloads all the
	      modified files referenced by the document 
	  + New : Allow to add an external CSS file to the list of the
	      external style sheet referenced by the document. It is also
	      possible to browse the content of a file without attaching it.
	      Amaya keep an history of the CSS files encountered, it is
	      saved between sessions, and allow to grab quickly one of the
	      CSS lastly referenced, for browsing the rules or attach it to
	      the current document.
	  + Remove : Allow to supress a reference to an external CSS file.
	  + Cancel : close the CSS form.

      There is some additionnal forms, file selectors, etc. needed for saving
      CSS files or selecting them from the history.

Now focus on what's supported from the CSS1 proposal :

    a) Parsing :
         + all the basic 
	    . grouping of selectors
	    . grouping of properties
	    . standard units
	    . comments (in external CSS files only)
	 + classes
	 + context sensitive selector
	 + basic support for pseudo classes
	    ':' is parsed and considered as a pseudo-class attribute
	        but there is no support inside.

    b) Cascading order :
         Should be Ok, however there are some case were
	 the internals of Thot don't follow the CSS rules.
	 + origin sorting should be Ok
	 + the internal rules on specificity will differ slighly
	   from the standard

    c) Formatting model :
         This is the bad corner. Thot kernel and CSS don't have the
	 same formatting model, Thot uses a simple box model following
	 Knuth implementation of TeX. This is quite simpler than CSS
	 formatting, and a full support will need a lot of work.

    d) CSS properties :
         Everything should be parsed correctly, i.e. the front-end
	 should be complete, but the back-end may lack support or
	 analysis is no fully compliant with the last drafts.

	 When using unimplemented attributes, you will get
	 "function_name code incomplete file file_name line ddd" messages
	 so if you really need it, you know where your editor should go :-).

          + Font :
	     all should be supported to some extend, except "font" used
	     to group properties.  
	  + Color :
	     a list of ~ 500 predefined colors name are here.
	     parsing of #RGB is ok.
	     rgb(...), url(...), background images, blending and
	     control are not yet supported.
	  + Text :
	     text-align, text-decoration and text-indent. No BLINK !
	  + Box Propoerties :
	     as said in c) horrible. A bit of support is provided
	     for margin-xxxx properties but not tested.
	     Width and height should be here soon, however.
	  + Classification
	     attemp to support display
	  + Misc
	     magnification is here, perfect for "Users Preference" style.


Various things :

  When searching for the users' preferences, Amaya will look first at
  $(HOME)/.amaya.css (user's) otherwise at $(THOTDIR)/bin/amaya.css
  (shared).

  The CSS history is stored in $(HOME)/.amaya/history.css

  The environment variable AMAYA_SAVE_DIR is used for publishing CSS when
  saving throught the network is not possible
    e.g.: considering the URL http://my_server/pub/file.css :

       if AMAYA_SAVE_DIR=/users/joe/html, Amaya will try to save it to :
       /users/joe/html/pub/file.css or
       /users/joe/html/file.css     in that order.

       if AMAYA_SAVE_DIR=/users/joe/html/%s, Amaya will try to save it to :
       /users/joe/html/my_server/pub/file.css or
       /users/joe/html/my_server/file.css or
       /users/joe/html/pub/file.css or
       /users/joe/html/file.css     in that order.

III ] What's lacking

Considering the current draft compliance, the main problems for full
CSS1 support are :

       a) The differences in the formatting model between Thot kernel and
          CSS are huge. Full compliance could be done in two way's :

	  - adding presentation boxes to HTML elements at the presentation
	    level in Thot, and use these artefacts to implement margins,
	    this kind of extra boxes are used list item bullet for example.
	    But some technical problems concerning constraints calculus
	    might not be solved this way.
	  - Changing the internal formatting model of Thot, gasp :-( ...

	  Neither seems a simple/good solution, this is a difficult problem.

       b) Differences in the cascading order rules, Thot has it's own
          way of constructing the output image from a set of internally
	  compiled presentations rules. The way it's browsing the internal
	  rules to select those that will be applied to build the image
	  do not follow strictly the CSS cascading order. Moreover some
	  HTML ID are not treated as Thot basic element but as attributes
	  (e.g. EM, B and all the initial presentation elements) leading
	  to somme difficulties (EM.class is cannot be handled now). Same
	  for important and legal CSS attributes.

       c) Pseudo elements will be difficult to handle, since these are
          not elements and cannot be added at parsing time, first lines for
          example are computed lately, and hence could not be easily added
	  as attributes on the structure. Since all the output calculation
	  is primarily based on the document structure and attributes, these
	  won't be handled in a clean way.

       d) Thot P language is a bit restrictive, and should be extended :
            - support for RGB color specification instead of using a best
	      in cube algorithm based on a set of pre-allocated colors.
            - more fonts, small-caps, cursive, fantasy ...
	  The CSS rules produced by Amaya are re-generated from the
	  internal P compiled form, thus when approximations are made
          at parsing, the output is degraded.

   All the others things can be done with reasonnable efforts, it's mainly
a question of time and manpower, among other implementing the following
features :
    - @inport
    - ID support. I'm still not convinced that such specific presentation
      should be put in the STYLE header, but parsing is needed.
    - important and legal

Considering the user interface, 
I guess that one of the main problems of
future style sheet writer will be the reverse problem induced by the
inheritance complexity :

   Beginner's question : How do I produce xxx kind of input ?

 CSS Writer's question : Why did it produce xxx kind of input ?

In front of his certified CSS ANSI Rev 12.1 U.A. a part of his document
doesn't have the expected look, why ? Considering the underneath complexity
of the cascading order, when referencing multiples external CSS, with
legal and important order, one can easily understand that debugging CSS
in real-use might turns to a nightmare. One nice feature would be to
show graphically all the rules applying to an element or a zone where
they came from and which rules they superseeded.

VI ] How is it done

     Without going into too much details, one can say that Thot kernel
build the output image dynamically, using two kind of objects :

      - the memory image of the document, it's a tree representing
        the structure, with attributes put on the nodes.
      - A set of blocks of presentation rules. The P specification
        of the standard HTML presentation is the main one, and a set
	of added blocks are chained to the document.

All the presentation specific presentation is done by inserting presentation
attribute in the tree. It's the case if one add style by selecting an
element and changing the fonts characteristics from the font panel.
In the opposite all the generic presentation control, i.e. STYLE part
in the header and external style sheet use P specifications. Any STYLE
descrition present in a document HEAD  is compiled on-the-fly to internal
P structures and stored in a new block. Idem for the external CSS files that
are referenced, except that they will be shared between different documents
using the same style. You might perceive it when changing presentation on
a document and try to use it on another (when forcing Amaya construction
of the output image, e.g. by scrolling or reloading). All the P rules
shown on the CSS dialogs, or the saved images of a CSS are rebuild
from the internal form. The original form is only kept for implementing
the Reload operation.


